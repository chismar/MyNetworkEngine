// ======== Export TW Project Animations =========
// Для запуска, надо вставить весть этот текст скрипта в редатор скриптов Maya, выделить текст скрипта - Ctrl+A и запустить - Ctrl+Enter
//
// экспортятся сцены только с референсом и только с одним,  по умолчанию экспортится только текущий открытый файл независимо от расширения.
// если надо сэкспортить все анимации в папке где находится открытый файл, то надо поставить переменную $exportAllFilesInFolder в единицу, расширение можно выбрать переменной $fExt, файлы рига и скина игнорируются
// их название или маску, как многие другие параметры можно задать в блоке с переменными
//
// скрипт импортит рефы в сцену, выключает анимационный слой "GameMove" если он есть (в этом слое следует делать глобальное игровое движение персонажа, например для прыжка это перемещение по дуге вперед)
// далее ищет кость Global с любым неймспейсом, бейкает и вынимает её из общего сетапа в корень сцены
// удаляет неймспейсы, экспрешшены, дисплей слои, фильтрует еулеры анимационных кривых
// затем ищет все меши со скином и если они без префикса "NE_" то выбирает их и кость Global (уже без неймспейса) и экспортит выделенное в FBX с нужными для проекта настройками, независимо от ручных настроек в экспорте.
// экспортит в подпапку "FBX" текущей папки

// если в анимациях не нужны меши, то надо поставить переменную $exportShapes в ноль
// 

// ==================================== блок с переменными, начальные установки ==================================== 
    int $exportAllFilesInFolder = 0; // 1 - exportAllFilesInFolder, 0 - export only current opened file
    int $doFBXExport = 1;
        int $exportAnimation = 1; //
        int $exportShapes = 0;
        int $exportCameras = 0;
        int $exportLights = 0;
    string $fbxfold = "FBX/";
    string $excludeFileMask01 = "_Skin.";
    string $excludeFileMask02 = "_RIG.";
	string $fExt = "*.ma"; // расширение файлов для обработки
	int $doBake = 1; // надо ли бейкать?
	string $ssHips = "Global"; // Skin Skeleton Hips bone name - рут скелета на который всё прискинено - для бейка
//    string $GlobalGroup = "Group"; // group to delete, without namespace!
    
    int $doImportRefs = 1; // импортить ли референсы?
	int $doEulerFilter = 1; // надо ли фильтровать кривые?
	int $doReplaceRef = 0; // надо ли заменять старый реф на новый?
	    string $newRef = "HumanMale_RIG.mb"; // имя нового рефа - обязательно с расширением и формат MB!
	int $doRename = 0; // надо ли переименовывать? - если да, то в блоке переименования надо собрать себе нужное имя и расширение
	int $doSave = 0;
    int $deleteLayers = 1;
	
string $log = ""; // записываем сюда все успехи и ошибки вот таким образом - string $message = ("Scene " + $с + " exported Succesfully\n"); print $message; $log = $log + $message;
                  // не забываем в конце скрипта выводить лог - print ($log + "\n");
	string $Files[] = {}; //тут список клипов в папке выбраной выше, только имена файлов с расширением
	
// ==================================== функции ============================================
global proc selectOnlyJoints() // select only joints in hierarchy of selected object
{
        
    string $joints[] = `ls -sl -typ joint -dag`;
    if(size($joints) == 0)
        error("No joints in selected DAG");
    select -r $joints;
}

proc string[] getSkinnedMeshesInScene()
{	
    $sceneMeshes = `ls -type mesh`;
    string $skinedMeshes[] = {};
    $i = 0;
    for ($sm in $sceneMeshes) // $sm = $sceneMeshes[0];
    {
        $isSkined = `listConnections -type skinCluster $sm`;
        if (size($isSkined) > 1) error ("Too much skin clusters - " + size($isSkined) + " on object " + $sm);
        if ($isSkined[0] != "") // print $isSkined[0];
        {
            $parents = `listRelatives -parent $sm`;
            if (size($parents) > 1) { error ("Too much parents! - " + size($parents) + " on object " + $sm);}
            string $mmm = $parents[0];
            $mt = `match "^NE_" $mmm`;
            if ($mt != "NE_" ) 
            {
                $skinedMeshes[$i] = $parents[0];
                $i++;
            }
        }
    }   
    
 //   print $skinedMeshes;
   $skinedMeshes = `stringArrayRemoveDuplicates $skinedMeshes`;
   return $skinedMeshes;
}

proc string[] listAttachedAnimCurves(string $node) 
{
	// get the connections and connected nodes
	$src_a = `listConnections -s true -d false -c true $node`;
	$src_n = `listConnections -s true -d false $node`;
    string $curves[] = {};
    int $ic = 0;
	for( $i=0; $i < size($src_n); $i++ ) 
	{
		$j = $i*2;

		// query the node type of the connected node
		$type = `nodeType $src_n[$i]`;
		
		// see if it's a 
		//   time to angular curve
		//   time to length curve  or a
		//   time to unitless curve
		if($type=="animCurveTA" || $type=="animCurveTL" || $type=="animCurveTU") 
		{
		   $curves[$ic] = $src_n[$i];
//		   print("\t"+$src_a[$j+1]+"\n");
		   $ic++;
		} 
	}
	return $curves;
}

proc trySelect (string $obj)
{
    if (objExists($obj)) select -add $obj;
}

// ==================================== START SCRIPT ==================================== 
    string $path = `file -q -sn`; if ($path == "") error ("Save current scene, or open smething that exist!");
	string $fold = dirname( $path ) + "/"; // путь к нашей MB-шкае

    if ($exportAllFilesInFolder)
    {
        $Files = `getFileList -folder $fold -filespec $fExt`; //тут список клипов в папке выбраной выше, только имена файлов с расширением
        if (size($Files) == 0) $message = ("No files found with " + $fExt + " extension in folder " + $fold + "\n"); print $message; $log = $log + $message;
    }
    else 
        $Files[0] = `match "[^/\\]*$" $path`;
    string $c = $Files[0];
    int $i = 0;


	for ($c in $Files)//$c = $Files[0];
	{   
    	if ( ((`match $excludeFileMask01 $c`)== "") && ((`match $excludeFileMask02 $c`)=="") ) // print "1";
    	{
            if ($exportAllFilesInFolder)
            {
        	    string $fName = ($fold  + $c);
        	    if ($fExt == "*.mb")
                    file -f -options "v=0"  -ignoreVersion  -typ "mayaBinary" -o $fName;
        	    if ($fExt == "*.ma")
                    file -f -options "v=0"  -ignoreVersion  -typ "mayaAscii" -o $fName;
            }
			
            int $start = `playbackOptions -q -min`;
			int $end = `playbackOptions -q -max`;

            // ================================== Import References =================================
    	    if ($doImportRefs)
    	    {
                string $Refs[] = `ls -references`;
                string $fNmae  = "";
                for ( $ref in $Refs ) // $ref = $Refs[0];
                {
                    if ( catch ( $fNmae = `referenceQuery -filename $ref`) );
                    else 
                        file -importReference $fNmae;
                }
			}

            // ===========================================================  DO Something 1 ========================================================

            /*
                        int $start = `playbackOptions -q -min`;
                        int $end = `playbackOptions -q -max`;
                        if ($start == -20)	playbackOptions -min ($start + 20) -max ($end - 20) ;
            */

            string $nsps[] = `namespaceInfo -listOnlyNamespaces`;
            if(size($nsps) != 3) 
            {
                $message = ("More than ONE namespace in scene - " + $nsps[0] + " | " + $c); print $message; $log = $log + $message;
                continue;
            }
            $NS = $nsps[0] + ":";

            if ( `objExists "GameMove"` )
                if ( `nodeType "GameMove"` == "animLayer" )
                {
                    animLayer -edit -mute 1 "GameMove";
                    animLayer -edit -lock true "GameMove";
                }

            // ================================== Bake animation =================================
    	    if ($doBake)
    	    {
				select -r ($NS + $ssHips);
				selectOnlyJoints;
				string $joints[] = `ls -sl`;
				string $message = ($start + ":" + $end + "     " + $c + "\n"); print $message; $log = $log + $message;
				bakeResults -simulation true -t ($start + ":" + $end) -sampleBy 1 -disableImplicitControl true -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -bakeOnOverrideLayer false -controlPoints false -shape true $joints;
			}

            // ============================== Euler filter ============================== 
    	    if ($doEulerFilter)
    	    {
				currentTime $start;
				select -r ($NS + $ssHips) ;
				selectOnlyJoints;
                string $joints[] = `ls -sl`;
                for ($j in $joints)
                {
					string $ac[] = `listAttachedAnimCurves $j`;
					filterCurve $ac;
                }
			}
            // ============================== Replace Reference file ============================== 
			if ($doReplaceRef)
    	    {
				string $refNodes[] = `ls -rf`;
				string $rn = $refNodes[0];
				file -loadReference $rn -type "mayaBinary" -options "v=0" ( $newRef ); 
				currentTime $start;
			}


            // ============================== Rename file (if needed) ============================== 
    	    if ($doRename)
    	    {
				string $fNameNoExt = basenameEx( $c );
				$c = `file -rename ($fold + $fNameNoExt + ".mb")`;
            }

            // ============================== Save file (undependent of extension) ============================== 
    	    if ($doSave)
    	    {
				string $fType = `match "\.[^\.]*$" $c`;
				if( $fType == ".mb") 
					file -save -type mayaBinary -defaultExtensions true;
				else 
					file -save -type mayaAscii -defaultExtensions true;
			}

            // ===========================================================  DO Something 2 ========================================================
            if(size(`listRelatives -parent ($NS + $ssHips)`)>0)
                parent -w ($NS + $ssHips);

            namespace -mergeNamespaceWithRoot -removeNamespace $nsps[0];
/*
            select -cl;
            select (`ls -type character`);
            trySelect pCylinder1;
            trySelect pCylinder2;
            trySelect HumanMale ;
            trySelect $GlobalGroup ;
            trySelect Chest_Orient_locator;
            trySelect Chest1_Orient_locator;
            trySelect "aTools*";
            trySelect "NE_*";
            trySelect "Overlapper*";
            doDelete; */
            select (`ls -type expression`);
            doDelete;

            if ($deleteLayers)
            {
                $lrs = `ls -type  displayLayer`;
                select -r $lrs;
                select -tgl defaultLayer;
                delete (`ls -sl`); 
            }

    // ========================== Delete NonJoints from Hierarchy ====================
    select -r $ssHips ;
    select_hierarhy;
    string $joints[] = `ls -sl`;
    select -tgl $joints[0];
    $joints = `ls -sl`;
    string $nonJoints[] = {};
    for ($j in $joints)
    {
        if ( `nodeType $j` != "joint" ) 
        {
            $nonJoints[size($nonJoints)] = $j;
        }
    }
    //    print $nonJoints;
    delete $nonJoints;
    
// ============================== Export to FBX ============================== 

    	    if ($doFBXExport)
    	    {
                FBXProperty Export|IncludeGrp|Geometry|SmoothingGroups -v 1;
                FBXProperty Export|IncludeGrp|Animation -v $exportAnimation;
                FBXProperty Export|IncludeGrp|Animation|Deformation -v $exportShapes;
                FBXExportAnimationOnly -v $exportAnimation;
                FBXExportSkeletonDefinitions -v 1;
                FBXExportSmoothingGroups -v 1;
                FBXExportSmoothMesh -v 0;
                FBXExportTangents -v 1;
                FBXExportUpAxis y;
                FBXExportShapes -v $exportShapes;
                FBXExportSkins -v $exportShapes;
                FBXExportCameras -v 0;
                FBXExportLights -v 0;
            
                FBXExportFileVersion -v FBX201600;
                FBXExportColladaFrameRate 30;
                FBXExportQuaternion -v resample;
                FBXExportScaleFactor 1.0;
                FBXExportConstraints -v 0;
            
                FBXProperty Export|IncludeGrp|Geometry|SelectionSet -v 0;
                FBXExportBakeComplexAnimation -v 0;
                FBXExportApplyConstantKeyReducer -v 0;
                FBXExportAxisConversionMethod none;
                FBXExportBakeResampleAnimation -v 0;
                FBXExportCacheFile -v 0;
                FBXExportEmbeddedTextures -v 0;
                FBXExportGenerateLog -v 0;
                FBXExportHardEdges -v 0;
                FBXExportInAscii -v 0;
                FBXExportInputConnections -v 0;
                FBXExportInstances -v 0;
                FBXExportSplitAnimationIntoTakes -c;
                FBXExportTriangulate -v 0;
                FBXExportUseSceneName -v 0;
                               
                select -r $ssHips;
                if ($exportShapes) select -add `getSkinnedMeshesInScene`;
                $path = `file -q -sn`;
                $fold = dirname( $path ) + "/"; // путь к нашей MB-шкае
                $fName = `match "[^/\\]*$" $path`;
                $fNameNoExt = basenameEx( $fName );
                if ( !`filetest -e ($fold + $fbxfold )` )
                    sysFile -makeDir ($fold + $fbxfold); 
  	            FBXExport -f ($fold + $fbxfold + $fNameNoExt + ".fbx") -s;
  	            
	        }
        }
        $i++;
// ======================== End FBX Export Selection ===========================
    }
	print ($log + "\n");
	
	
