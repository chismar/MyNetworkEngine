// ======== Export Weapon for TW Project =========
// Для запуска, надо вставить весть этот текст скрипта в редатор скриптов Maya, выделить текст скрипта - Ctrl+A и запустить - Ctrl+Enter
//
// по умолчанию экспортится только текущий открытый файл независимо от расширения, референсы не будут учитываться
// если надо сэкспортить все файлы в папке где находится открытый файл, то надо поставить переменную $exportAllFilesInFolder в единицу, расширение можно выбрать переменной $fExt, 
// массово обрабатываются только файлы имя которых содержит символы соответствующие маске_*H_ , например Sword_1H_Zombie
// по одному можно экспортить файлы с любым именем
// скрипт ищет меши с названиями Weapon_Mesh* и Weapon_Collider* без префикса "NE_"
// удаляет экспрешшены и дисплей слои
// выбирает их и экспортит выделенное в FBX с нужными для проекта настройками, независимо от ручных настроек в экспорте.
// экспортит в подпапку $fbxfold ("FBX") текущей папки


// ==================================== блок с переменными, начальные установки ==================================== 
int $exportAllFilesInFolder = 0; // 1 - exportAllFilesInFolder, 0 - export only current opened file
int $doFBXExport = 1;
    int $exportAnimation = 0; //
    int $exportShapes = 1;
    int $exportCameras = 0;
    int $exportLights = 0;
string $fbxfold = "FBX/";
string $fExt = "*.ma"; // расширение файлов для обработки
int $deleteLayers = 1;

string $log = ""; // записываем сюда все успехи и ошибки вот таким образом - string $message = ("Scene " + $с + " exported Succesfully\n"); print $message; $log = $log + $message;
                  // не забываем в конце скрипта выводить лог - print ($log + "\n");
string $Files[] = {}; // тут собираем список фалов в текущей папке, только имена файлов с расширением

// ==================================== функции ============================================
proc string[] getWeaponMeshesInScene()
{	
    $sceneMeshes = `ls -type mesh`;
    string $weaponMeshes[] = {};
    for ($sm in $sceneMeshes) // $sm = $sceneMeshes[0];
    {
        $parents = `listRelatives -parent $sm`; // выбираем трансформ ноду нашего меша

        if (size($parents) > 1) { error ("Too much parents! - " + size($parents) + " on object " + $sm);}
        string $obj = $parents[0];

        if ( `match "^NE_" $obj` != "" ) continue;
        
        if ( ( `match "^Weapon_Collider" $obj` != "" ) || ( `match "^Weapon_Mesh" $obj` != "" ) ) 
            $weaponMeshes[size($weaponMeshes)] = $obj;
        
        
    }   
    
 //   print $weaponMeshes;
   $weaponMeshes = `stringArrayRemoveDuplicates $weaponMeshes`;
   return $weaponMeshes;
}

proc string[] listAttachedAnimCurves(string $node) 
{
	// get the connections and connected nodes
	$src_a = `listConnections -s true -d false -c true $node`;
	$src_n = `listConnections -s true -d false $node`;
    string $curves[] = {};
    int $ic = 0;
	for( $i=0; $i < size($src_n); $i++ ) 
	{
		$j = $i*2;

		// query the node type of the connected node
		$type = `nodeType $src_n[$i]`;
		
		// see if it's a 
		//   time to angular curve
		//   time to length curve  or a
		//   time to unitless curve
		if($type=="animCurveTA" || $type=="animCurveTL" || $type=="animCurveTU") 
		{
		   $curves[$ic] = $src_n[$i];
//		   print("\t"+$src_a[$j+1]+"\n");
		   $ic++;
		} 
	}
	return $curves;
}

// ==================================== START SCRIPT ==================================== 
string $path = `file -q -sn`; if ($path == "") error ("Save current scene, or open smething that exist!");
string $fold = dirname( $path ) + "/"; // путь к нашей MB-шкае

if ($exportAllFilesInFolder)
    $Files = `getFileList -folder $fold -filespec $fExt`; //тут список клипов в папке выбраной выше, только имена файлов с расширением
else 
    $Files[0] = `match "[^/\\]*$" $path`;
$c = $Files[0];

for ($c in $Files)//$c = $Files[0];
{   
    if ( `match "_.H_" $c` != "" ) // print "1";
    {
        if ($exportAllFilesInFolder)
        {
            string $fName = ($fold  + $c);
            if ($fExt == "*.mb")
                file -f -options "v=0"  -ignoreVersion  -typ "mayaBinary" -o $fName;
            if ($fExt == "*.ma")
                file -f -options "v=0"  -ignoreVersion  -typ "mayaAscii" -o $fName;
        }
        
        // ========================== Delete Some trash from relative to exported objects ====================
        select (`ls -type expression`); doDelete;
        if ($deleteLayers){ $lrs = `ls -type  displayLayer`; select -r $lrs; select -tgl defaultLayer; delete (`ls -sl`); }

        // ============================== Export to FBX ============================== 

        if ($doFBXExport)
        {
            FBXProperty Export|IncludeGrp|Geometry|SmoothingGroups -v 1;
            FBXProperty Export|IncludeGrp|Animation -v $exportAnimation;
            FBXProperty Export|IncludeGrp|Animation|Deformation -v $exportShapes;
            FBXExportAnimationOnly -v 0;
            FBXExportSkeletonDefinitions -v 1;
            FBXExportSmoothingGroups -v 1;
            FBXExportSmoothMesh -v 0;
            FBXExportTangents -v 1;
            FBXExportUpAxis y;
            FBXExportShapes -v $exportShapes;
            FBXExportSkins -v $exportShapes;
            FBXExportCameras -v 0;
            FBXExportLights -v 0;
        
            FBXExportFileVersion -v FBX201600;
            FBXExportColladaFrameRate 30;
            FBXExportQuaternion -v resample;
            FBXExportScaleFactor 1.0;
            FBXExportConstraints -v 0;
        
            FBXProperty Export|IncludeGrp|Geometry|SelectionSet -v 0;
            FBXExportBakeComplexAnimation -v 0;
            FBXExportApplyConstantKeyReducer -v 0;
            FBXExportAxisConversionMethod none;
            FBXExportBakeResampleAnimation -v 0;
            FBXExportCacheFile -v 0;
            FBXExportEmbeddedTextures -v 0;
            FBXExportGenerateLog -v 0;
            FBXExportHardEdges -v 0;
            FBXExportInAscii -v 0;
            FBXExportInputConnections -v 0;
            FBXExportInstances -v 0;
            FBXExportSplitAnimationIntoTakes -c;
            FBXExportTriangulate -v 0;
            FBXExportUseSceneName -v 0;
                           
            if ($exportShapes) select -add `getWeaponMeshesInScene`;
            $path = `file -q -sn`;
            $fold = dirname( $path ) + "/"; // путь к нашей MB-шкае
            $fName = `match "[^/\\]*$" $path`;
            $fNameNoExt = basenameEx( $fName );
            if ( !`filetest -e ($fold + $fbxfold )` )
                sysFile -makeDir ($fold + $fbxfold); 
            FBXExport -f ($fold + $fbxfold + $fNameNoExt + ".fbx") -s;
            
        }
    }
}

print ($log + "\n");






