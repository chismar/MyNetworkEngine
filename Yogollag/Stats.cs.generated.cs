// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CodeGen;
using Definitions;
using NetworkEngine;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LiteNetLib.Utils;

namespace Yogollag
{
    [GeneratedClass]
    public partial class AccumulatedStatSync
    {
        override protected void SetDefsForComponents()
        {
        }

        override public void CallInitOnComponents()
        {
        }

        override public void CallCreateOnComponents()
        {
        }

        override public void CallDestroyOnComponents()
        {
        }
    }

    //obj AccumulatedStat generic  hasCustomSerialization false
    //debug info  0
    [GeneratedClass]
    public partial class AccumulatedStatSync : AccumulatedStat, IGhost
    {
        public override DeltaList<AccStatModifier> Modifiers
        {
            get => base.Modifiers;
            set
            {
                ((SyncObject)base.Modifiers)?.SetParentEntity(null);
                base.Modifiers = value;
                OnPropChanged(0);
                ((SyncObject)base.Modifiers)?.SetParentEntity(ParentEntity);
            }
        }

        public override StatDef StatDef
        {
            get => base.StatDef;
            set
            {
                base.StatDef = value;
                OnPropChanged(1);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
            ((IGhost)Modifiers)?.ClearSerialization();
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, -10801742);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, -867939712);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, -867939712);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    Modifiers = null;
                }
                else
                {
                    var newVal = SyncObject.New<DeltaList<AccStatModifier>>();
                    ((IGhost)newVal).Deserialize(stream);
                    Modifiers = (DeltaList<AccStatModifier>)newVal;
                }

                CheckStream(stream, -867939712);
            }
            else
            {
                CheckStream(stream, -867939712);
                ((IGhost)Modifiers)?.Deserialize(stream);
                CheckStream(stream, -867939712);
            }

            CheckStream(stream, 1443344671);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, 1443344671);
                var has = stream.GetBool();
                StatDef = !has ? default : (StatDef)SyncTypesMap.GetSerializerForObjType(typeof(StatDef)).Deserialize(stream);
                CheckStream(stream, 1443344671);
            }
        }

        public override void SetParentEntityRecursive()
        {
            ((SyncObject)Modifiers)?.SetParentEntity(this.ParentEntity);
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, -10801742);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, -867939712);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, -867939712);
                hasAny = true;
                if (Modifiers == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    ((IGhost)Modifiers).Serialize(ref stream, true);
                }

                SafeguardStream(stream, -867939712);
            }
            else
            {
                SafeguardStream(stream, -867939712);
                hasAny |= ((IGhost)Modifiers)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, -867939712);
            }

            SafeguardStream(stream, 1443344671);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, 1443344671);
                hasAny = true;
                if (StatDef != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(StatDef)).Serialize(StatDef, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, 1443344671);
            }

            return hasAny;
        }
    }
}

namespace Yogollag
{
    [GeneratedClass]
    public partial class LinearStatSync
    {
        override protected void SetDefsForComponents()
        {
        }

        override public void CallInitOnComponents()
        {
        }

        override public void CallCreateOnComponents()
        {
        }

        override public void CallDestroyOnComponents()
        {
        }
    }

    //obj LinearStat generic  hasCustomSerialization false
    //debug info  0
    [GeneratedClass]
    public partial class LinearStatSync : LinearStat, IGhost
    {
        public override Single BreakpointValue
        {
            get => base.BreakpointValue;
            set
            {
                base.BreakpointValue = value;
                OnPropChanged(0);
            }
        }

        public override Int64 BreakpointTime
        {
            get => base.BreakpointTime;
            set
            {
                base.BreakpointTime = value;
                OnPropChanged(1);
            }
        }

        public override Single ChangeRate
        {
            get => base.ChangeRate;
            set
            {
                base.ChangeRate = value;
                OnPropChanged(2);
            }
        }

        public override StatDef StatDef
        {
            get => base.StatDef;
            set
            {
                base.StatDef = value;
                OnPropChanged(3);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, -538908233);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, 1027813458);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, 1027813458);
                BreakpointValue = stream.GetFloat();
                CheckStream(stream, 1027813458);
            }

            CheckStream(stream, 240252452);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, 240252452);
                BreakpointTime = stream.GetLong();
                CheckStream(stream, 240252452);
            }

            CheckStream(stream, -1139095569);
            if ((mask & (1 << 2)) != 0)
            {
                CheckStream(stream, -1139095569);
                ChangeRate = stream.GetFloat();
                CheckStream(stream, -1139095569);
            }

            CheckStream(stream, 1443344671);
            if ((mask & (1 << 3)) != 0)
            {
                CheckStream(stream, 1443344671);
                var has = stream.GetBool();
                StatDef = !has ? default : (StatDef)SyncTypesMap.GetSerializerForObjType(typeof(StatDef)).Deserialize(stream);
                CheckStream(stream, 1443344671);
            }
        }

        public override void SetParentEntityRecursive()
        {
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, -538908233);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, 1027813458);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, 1027813458);
                hasAny = true;
                stream.Put(BreakpointValue);
                SafeguardStream(stream, 1027813458);
            }

            SafeguardStream(stream, 240252452);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, 240252452);
                hasAny = true;
                stream.Put(BreakpointTime);
                SafeguardStream(stream, 240252452);
            }

            SafeguardStream(stream, -1139095569);
            if ((deltaMask & (1 << 2)) != 0)
            {
                SafeguardStream(stream, -1139095569);
                hasAny = true;
                stream.Put(ChangeRate);
                SafeguardStream(stream, -1139095569);
            }

            SafeguardStream(stream, 1443344671);
            if ((deltaMask & (1 << 3)) != 0)
            {
                SafeguardStream(stream, 1443344671);
                hasAny = true;
                if (StatDef != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(StatDef)).Serialize(StatDef, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, 1443344671);
            }

            return hasAny;
        }
    }
}

namespace Yogollag
{
    [GeneratedClass]
    public class StatsEngineSceneDef : BaseDef, ISceneDef
    {
    }

    [GeneratedClass]
    public class StatsEngineDef : BaseDef, IEntityObjectDef
    {
        public List<DefRef<StatInstanceDef>> Stats
        {
            get;
            set;
        }

        = new List<DefRef<StatInstanceDef>>();
    }

    [GeneratedClass]
    public partial class StatsEngineSync
    {
        public override List<DefRef<StatInstanceDef>> Stats
        {
            get => ((StatsEngineDef)Def).Stats;
        }

        override protected void SetDefsForComponents()
        {
        }

        override public void CallInitOnComponents()
        {
        }

        override public void CallCreateOnComponents()
        {
        }

        override public void CallDestroyOnComponents()
        {
        }
    }

    //obj StatsEngine generic  hasCustomSerialization false
    //debug info IEntityComponent 1
    [GeneratedClass]
    public partial class StatsEngineSync : StatsEngine, IGhost
    {
        public override DeltaList<BaseStat> StatsSync
        {
            get => base.StatsSync;
            set
            {
                ((SyncObject)base.StatsSync)?.SetParentEntity(null);
                base.StatsSync = value;
                OnPropChanged(0);
                ((SyncObject)base.StatsSync)?.SetParentEntity(ParentEntity);
            }
        }

        public override Int32 SyncId
        {
            get => base.SyncId;
            set
            {
                base.SyncId = value;
                OnPropChanged(1);
            }
        }

        public override void InitFromSceneDef(BaseDef def)
        {
            var selfDef = (StatsEngineSceneDef)def;
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
            ((IGhost)StatsSync)?.ClearSerialization();
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, 1723521002);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, -1020506853);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, -1020506853);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    StatsSync = null;
                }
                else
                {
                    var newVal = SyncObject.New<DeltaList<BaseStat>>();
                    ((IGhost)newVal).Deserialize(stream);
                    StatsSync = (DeltaList<BaseStat>)newVal;
                }

                CheckStream(stream, -1020506853);
            }
            else
            {
                CheckStream(stream, -1020506853);
                ((IGhost)StatsSync)?.Deserialize(stream);
                CheckStream(stream, -1020506853);
            }

            CheckStream(stream, -949503164);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, -949503164);
                SyncId = stream.GetInt();
                CheckStream(stream, -949503164);
            }
        }

        public override void SetParentEntityRecursive()
        {
            ((SyncObject)StatsSync)?.SetParentEntity(this.ParentEntity);
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, 1723521002);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, -1020506853);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, -1020506853);
                hasAny = true;
                if (StatsSync == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    ((IGhost)StatsSync).Serialize(ref stream, true);
                }

                SafeguardStream(stream, -1020506853);
            }
            else
            {
                SafeguardStream(stream, -1020506853);
                hasAny |= ((IGhost)StatsSync)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, -1020506853);
            }

            SafeguardStream(stream, -949503164);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, -949503164);
                hasAny = true;
                stream.Put(SyncId);
                SafeguardStream(stream, -949503164);
            }

            return hasAny;
        }
    }
}