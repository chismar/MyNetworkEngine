// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using NetworkEngine;
using CodeGen;
using System;
using System.Collections.Generic;
using System.Text;
using LiteNetLib.Utils;
using SFML.Graphics;
using Definitions;
using Volatile;

namespace Yogollag
{
    //obj WorldItemEntity generic  hasCustomSerialization false
    //debug info IEntityPropertyChanged,IPositionedEntity,IRenderable,IInteractive,IEntityObject 5
    public class WorldItemEntitySync : WorldItemEntity, IGhost
    {
        public override Item Item
        {
            get => base.Item;
            set
            {
                ((SyncObject)base.Item)?.SetParentEntity(null);
                base.Item = value;
                OnPropChanged(0);
                ((SyncObject)base.Item)?.SetParentEntity(ParentEntity);
            }
        }

        public override Vec2 Position
        {
            get => base.Position;
            set
            {
                base.Position = value;
                OnPropChanged(1);
            }
        }

        public override Single Rotation
        {
            get => base.Rotation;
            set
            {
                base.Rotation = value;
                OnPropChanged(2);
            }
        }

        public override IEntityObjectDef Def
        {
            get => base.Def;
            set
            {
                base.Def = value;
                OnPropChanged(3);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
            ((IGhost)Item)?.ClearSerialization();
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, -1271944501);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, -1543754325);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, -1543754325);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    Item = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    Item = (Item)newVal;
                }

                CheckStream(stream, -1543754325);
            }
            else
            {
                CheckStream(stream, -1543754325);
                ((IGhost)Item)?.Deserialize(stream);
                CheckStream(stream, -1543754325);
            }

            CheckStream(stream, 352680343);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, 352680343);
                var has = stream.GetBool();
                Position = !has ? default : (Vec2)SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Deserialize(stream);
                CheckStream(stream, 352680343);
            }

            CheckStream(stream, 1055202200);
            if ((mask & (1 << 2)) != 0)
            {
                CheckStream(stream, 1055202200);
                Rotation = stream.GetFloat();
                CheckStream(stream, 1055202200);
            }

            CheckStream(stream, -188289771);
            if ((mask & (1 << 3)) != 0)
            {
                CheckStream(stream, -188289771);
                var has = stream.GetBool();
                Def = !has ? default : (IEntityObjectDef)SyncTypesMap.GetSerializerForObjType(typeof(IEntityObjectDef)).Deserialize(stream);
                CheckStream(stream, -188289771);
            }
        }

        public override void SetParentEntityRecursive()
        {
            ((SyncObject)Item)?.SetParentEntity(this.ParentEntity);
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, -1271944501);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, -1543754325);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, -1543754325);
                hasAny = true;
                if (Item == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(Item.GetType()));
                    ((IGhost)Item).Serialize(ref stream, true);
                }

                SafeguardStream(stream, -1543754325);
            }
            else
            {
                SafeguardStream(stream, -1543754325);
                hasAny |= ((IGhost)Item)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, -1543754325);
            }

            SafeguardStream(stream, 352680343);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, 352680343);
                hasAny = true;
                if (Position != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Serialize(Position, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, 352680343);
            }

            SafeguardStream(stream, 1055202200);
            if ((deltaMask & (1 << 2)) != 0)
            {
                SafeguardStream(stream, 1055202200);
                hasAny = true;
                stream.Put(Rotation);
                SafeguardStream(stream, 1055202200);
            }

            SafeguardStream(stream, -188289771);
            if ((deltaMask & (1 << 3)) != 0)
            {
                SafeguardStream(stream, -188289771);
                hasAny = true;
                if (Def != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(IEntityObjectDef)).Serialize(Def, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, -188289771);
            }

            return hasAny;
        }

        public override void BeTaken(EntityId takerId)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.BeTaken(takerId);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new WorldItemEntityBeTakenMessage()
                {EntityId = Id, takerId = takerId});
            }
        }
    }

    public class WorldItemEntityBeTakenMessage : EntityMessage
    {
        public override int NetId => 63096128;
        public EntityId takerId;
        public override void Run(object entity)
        {
            ((WorldItemEntity)entity).BeTaken(takerId);
        }
    }

    public class WorldItemEntityBeTakenMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new WorldItemEntityBeTakenMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                var has = stream.GetBool();
                messageToSerialize.takerId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (WorldItemEntityBeTakenMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.takerId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.takerId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            return true;
        }
    }
}