// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using NetworkEngine;
using CodeGen;
using SFML.Graphics;
using SFML.System;
using SFML.Window;
using System;
using System.Threading.Tasks;
using LiteNetLib.Utils;
using System.Linq;
using System.Collections.Generic;
using Volatile;
using Definitions;
using SFML.Audio;

namespace Yogollag
{
}

namespace Yogollag
{
    //obj VisibilityEntity generic  hasCustomSerialization false
    //debug info IEntityPropertyChanged,ITicked 2
    public class VisibilityEntitySync : VisibilityEntity, IGhost
    {
        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, 1050620974);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
        }

        public override void SetParentEntityRecursive()
        {
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, 1050620974);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            return hasAny;
        }
    }
}

namespace Yogollag
{
    //obj SessionEntity generic  hasCustomSerialization false
    //debug info IEntityPropertyChanged 1
    public class SessionEntitySync : SessionEntity, IGhost
    {
        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, 1074413376);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
        }

        public override void SetParentEntityRecursive()
        {
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, 1074413376);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            return hasAny;
        }

        public override void Join(string name)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.Join(name);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new SessionEntityJoinMessage()
                {EntityId = Id, name = name});
            }
        }
    }

    public class SessionEntityJoinMessage : EntityMessage
    {
        public override int NetId => -1093761603;
        public string name;
        public override void Run(object entity)
        {
            ((SessionEntity)entity).Join(name);
        }
    }

    public class SessionEntityJoinMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new SessionEntityJoinMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                messageToSerialize.name = stream.GetString();
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (SessionEntityJoinMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                stream.Put(messageToSerialize.name);
            }

            return true;
        }
    }
}

namespace Yogollag
{
    //obj SampleComponent generic  hasCustomSerialization false
    //debug info  0
    public class SampleComponentSync : SampleComponent, IGhost
    {
        public override Vec2 Pos
        {
            get => base.Pos;
            set
            {
                base.Pos = value;
                OnPropChanged(0);
            }
        }

        public override Vec2 PrevPos
        {
            get => base.PrevPos;
            set
            {
                base.PrevPos = value;
                OnPropChanged(1);
            }
        }

        public override Int32 SyncId
        {
            get => base.SyncId;
            set
            {
                base.SyncId = value;
                OnPropChanged(2);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, 540107890);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, -2032856926);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, -2032856926);
                var has = stream.GetBool();
                Pos = !has ? default : (Vec2)SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Deserialize(stream);
                CheckStream(stream, -2032856926);
            }

            CheckStream(stream, 62299298);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, 62299298);
                var has = stream.GetBool();
                PrevPos = !has ? default : (Vec2)SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Deserialize(stream);
                CheckStream(stream, 62299298);
            }

            CheckStream(stream, 807708286);
            if ((mask & (1 << 2)) != 0)
            {
                CheckStream(stream, 807708286);
                SyncId = stream.GetInt();
                CheckStream(stream, 807708286);
            }
        }

        public override void SetParentEntityRecursive()
        {
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, 540107890);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, -2032856926);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, -2032856926);
                hasAny = true;
                if (Pos != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Serialize(Pos, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, -2032856926);
            }

            SafeguardStream(stream, 62299298);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, 62299298);
                hasAny = true;
                if (PrevPos != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Serialize(PrevPos, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, 62299298);
            }

            SafeguardStream(stream, 807708286);
            if ((deltaMask & (1 << 2)) != 0)
            {
                SafeguardStream(stream, 807708286);
                hasAny = true;
                stream.Put(SyncId);
                SafeguardStream(stream, 807708286);
            }

            return hasAny;
        }

        public override void HandlePos(Vec2 newPos)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.HandlePos(newPos);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new SampleComponentHandlePosMessage()
                {EntityId = Id, newPos = newPos});
            }
        }
    }

    public class SampleComponentHandlePosMessage : EntityMessage
    {
        public override int NetId => 1002104612;
        public Vec2 newPos;
        public override void Run(object entity)
        {
            ((SampleComponent)entity).HandlePos(newPos);
        }
    }

    public class SampleComponentHandlePosMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new SampleComponentHandlePosMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                var has = stream.GetBool();
                messageToSerialize.newPos = !has ? default : (Vec2)SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Deserialize(stream);
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (SampleComponentHandlePosMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.newPos != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Serialize(messageToSerialize.newPos, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            return true;
        }
    }
}

namespace Yogollag
{
    //obj Item generic  hasCustomSerialization false
    //debug info IEntityObject 1
    public class ItemSync : Item, IGhost
    {
        public override Int64 ItemId
        {
            get => base.ItemId;
            set
            {
                base.ItemId = value;
                OnPropChanged(0);
            }
        }

        public override ItemDef ItemDef
        {
            get => base.ItemDef;
            set
            {
                base.ItemDef = value;
                OnPropChanged(1);
            }
        }

        public override Int32 SyncId
        {
            get => base.SyncId;
            set
            {
                base.SyncId = value;
                OnPropChanged(2);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, 675050224);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, 1525563482);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, 1525563482);
                ItemId = stream.GetLong();
                CheckStream(stream, 1525563482);
            }

            CheckStream(stream, -60026557);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, -60026557);
                var has = stream.GetBool();
                ItemDef = !has ? default : (ItemDef)SyncTypesMap.GetSerializerForObjType(typeof(ItemDef)).Deserialize(stream);
                CheckStream(stream, -60026557);
            }

            CheckStream(stream, 807708286);
            if ((mask & (1 << 2)) != 0)
            {
                CheckStream(stream, 807708286);
                SyncId = stream.GetInt();
                CheckStream(stream, 807708286);
            }
        }

        public override void SetParentEntityRecursive()
        {
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, 675050224);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, 1525563482);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, 1525563482);
                hasAny = true;
                stream.Put(ItemId);
                SafeguardStream(stream, 1525563482);
            }

            SafeguardStream(stream, -60026557);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, -60026557);
                hasAny = true;
                if (ItemDef != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(ItemDef)).Serialize(ItemDef, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, -60026557);
            }

            SafeguardStream(stream, 807708286);
            if ((deltaMask & (1 << 2)) != 0)
            {
                SafeguardStream(stream, 807708286);
                hasAny = true;
                stream.Put(SyncId);
                SafeguardStream(stream, 807708286);
            }

            return hasAny;
        }
    }
}

namespace Yogollag
{
    //obj ItemsCollection generic  hasCustomSerialization false
    //debug info  0
    public class ItemsCollectionSync : ItemsCollection, IGhost
    {
        public override Int32 Size
        {
            get => base.Size;
            set
            {
                base.Size = value;
                OnPropChanged(0);
            }
        }

        public override Int64 Counter
        {
            get => base.Counter;
            set
            {
                base.Counter = value;
                OnPropChanged(1);
            }
        }

        public override DeltaList<Item> Items
        {
            get => base.Items;
            set
            {
                ((SyncObject)base.Items)?.SetParentEntity(null);
                base.Items = value;
                OnPropChanged(2);
                ((SyncObject)base.Items)?.SetParentEntity(ParentEntity);
            }
        }

        public override Int32 SyncId
        {
            get => base.SyncId;
            set
            {
                base.SyncId = value;
                OnPropChanged(3);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
            ((IGhost)Items)?.ClearSerialization();
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, -403058117);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, 1624298103);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, 1624298103);
                Size = stream.GetInt();
                CheckStream(stream, 1624298103);
            }

            CheckStream(stream, -1889145347);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, -1889145347);
                Counter = stream.GetLong();
                CheckStream(stream, -1889145347);
            }

            CheckStream(stream, 2084289311);
            if ((mask & (1 << 2)) != 0)
            {
                CheckStream(stream, 2084289311);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    Items = null;
                }
                else
                {
                    var newVal = SyncObject.New<DeltaList<Item>>();
                    ((IGhost)newVal).Deserialize(stream);
                    Items = (DeltaList<Item>)newVal;
                }

                CheckStream(stream, 2084289311);
            }
            else
            {
                CheckStream(stream, 2084289311);
                ((IGhost)Items)?.Deserialize(stream);
                CheckStream(stream, 2084289311);
            }

            CheckStream(stream, 807708286);
            if ((mask & (1 << 3)) != 0)
            {
                CheckStream(stream, 807708286);
                SyncId = stream.GetInt();
                CheckStream(stream, 807708286);
            }
        }

        public override void SetParentEntityRecursive()
        {
            ((SyncObject)Items)?.SetParentEntity(this.ParentEntity);
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, -403058117);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, 1624298103);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, 1624298103);
                hasAny = true;
                stream.Put(Size);
                SafeguardStream(stream, 1624298103);
            }

            SafeguardStream(stream, -1889145347);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, -1889145347);
                hasAny = true;
                stream.Put(Counter);
                SafeguardStream(stream, -1889145347);
            }

            SafeguardStream(stream, 2084289311);
            if ((deltaMask & (1 << 2)) != 0)
            {
                SafeguardStream(stream, 2084289311);
                hasAny = true;
                if (Items == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    ((IGhost)Items).Serialize(ref stream, true);
                }

                SafeguardStream(stream, 2084289311);
            }
            else
            {
                SafeguardStream(stream, 2084289311);
                hasAny |= ((IGhost)Items)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, 2084289311);
            }

            SafeguardStream(stream, 807708286);
            if ((deltaMask & (1 << 3)) != 0)
            {
                SafeguardStream(stream, 807708286);
                hasAny = true;
                stream.Put(SyncId);
                SafeguardStream(stream, 807708286);
            }

            return hasAny;
        }

        public override void DropItem(Item item)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.DropItem(item);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new ItemsCollectionDropItemMessage()
                {EntityId = Id, item = item});
            }
        }

        public override void AddItem(Item item)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.AddItem(item);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new ItemsCollectionAddItemMessage()
                {EntityId = Id, item = item});
            }
        }

        public override void RemoveItem(long itemId)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.RemoveItem(itemId);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new ItemsCollectionRemoveItemMessage()
                {EntityId = Id, itemId = itemId});
            }
        }

        public override void MoveItem(long itemId, int slot)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.MoveItem(itemId, slot);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new ItemsCollectionMoveItemMessage()
                {EntityId = Id, itemId = itemId, slot = slot});
            }
        }
    }

    public class ItemsCollectionDropItemMessage : EntityMessage
    {
        public override int NetId => 75789353;
        public Item item;
        public override void Run(object entity)
        {
            ((ItemsCollection)entity).DropItem(item);
        }
    }

    public class ItemsCollectionDropItemMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new ItemsCollectionDropItemMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    messageToSerialize.item = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    messageToSerialize.item = (Item)newVal;
                }
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (ItemsCollectionDropItemMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.item == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(messageToSerialize.item.GetType()));
                    ((IGhost)messageToSerialize.item).Serialize(ref stream, true);
                }
            }

            return true;
        }
    }

    public class ItemsCollectionAddItemMessage : EntityMessage
    {
        public override int NetId => 692360790;
        public Item item;
        public override void Run(object entity)
        {
            ((ItemsCollection)entity).AddItem(item);
        }
    }

    public class ItemsCollectionAddItemMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new ItemsCollectionAddItemMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    messageToSerialize.item = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    messageToSerialize.item = (Item)newVal;
                }
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (ItemsCollectionAddItemMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.item == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(messageToSerialize.item.GetType()));
                    ((IGhost)messageToSerialize.item).Serialize(ref stream, true);
                }
            }

            return true;
        }
    }

    public class ItemsCollectionRemoveItemMessage : EntityMessage
    {
        public override int NetId => 158092751;
        public long itemId;
        public override void Run(object entity)
        {
            ((ItemsCollection)entity).RemoveItem(itemId);
        }
    }

    public class ItemsCollectionRemoveItemMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new ItemsCollectionRemoveItemMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                messageToSerialize.itemId = stream.GetLong();
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (ItemsCollectionRemoveItemMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                stream.Put(messageToSerialize.itemId);
            }

            return true;
        }
    }

    public class ItemsCollectionMoveItemMessage : EntityMessage
    {
        public override int NetId => 606410926;
        public long itemId;
        public int slot;
        public override void Run(object entity)
        {
            ((ItemsCollection)entity).MoveItem(itemId, slot);
        }
    }

    public class ItemsCollectionMoveItemMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new ItemsCollectionMoveItemMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                messageToSerialize.itemId = stream.GetLong();
            }

            {
                messageToSerialize.slot = stream.GetInt();
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (ItemsCollectionMoveItemMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                stream.Put(messageToSerialize.itemId);
            }

            {
                stream.Put(messageToSerialize.slot);
            }

            return true;
        }
    }
}

namespace Yogollag
{
    //obj CharacterEntity generic  hasCustomSerialization false
    //debug info IEntityPropertyChanged,ICharacterLikeMovement,IRenderable,IPositionedEntity,IStatEntity,IImpactedEntity,IQuester,IHasInventory,IEntityObject,ITicked,IHasSpells 11
    public class CharacterEntitySync : CharacterEntity, IGhost
    {
        public override Single Rotation
        {
            get => base.Rotation;
            set
            {
                base.Rotation = value;
                OnPropChanged(0);
            }
        }

        public override Int64 ActiveItemId
        {
            get => base.ActiveItemId;
            set
            {
                base.ActiveItemId = value;
                OnPropChanged(1);
            }
        }

        public override RoleDef SecretRole
        {
            get => base.SecretRole;
            set
            {
                base.SecretRole = value;
                OnPropChanged(2);
            }
        }

        public override RoleDef Job
        {
            get => base.Job;
            set
            {
                base.Job = value;
                OnPropChanged(3);
            }
        }

        public override SpellsEngine SpellsEngine
        {
            get => base.SpellsEngine;
            set
            {
                ((SyncObject)base.SpellsEngine)?.SetParentEntity(null);
                base.SpellsEngine = value;
                OnPropChanged(4);
                ((SyncObject)base.SpellsEngine)?.SetParentEntity(ParentEntity);
            }
        }

        public override SampleComponent Cmp
        {
            get => base.Cmp;
            set
            {
                ((SyncObject)base.Cmp)?.SetParentEntity(null);
                base.Cmp = value;
                OnPropChanged(5);
                ((SyncObject)base.Cmp)?.SetParentEntity(ParentEntity);
            }
        }

        public override String Name
        {
            get => base.Name;
            set
            {
                base.Name = value;
                OnPropChanged(6);
            }
        }

        public override Vec2 Position
        {
            get => base.Position;
            set
            {
                base.Position = value;
                OnPropChanged(7);
            }
        }

        public override Single Speed
        {
            get => base.Speed;
            set
            {
                base.Speed = value;
                OnPropChanged(8);
            }
        }

        public override StatsEngine StatsEngine
        {
            get => base.StatsEngine;
            set
            {
                ((SyncObject)base.StatsEngine)?.SetParentEntity(null);
                base.StatsEngine = value;
                OnPropChanged(9);
                ((SyncObject)base.StatsEngine)?.SetParentEntity(ParentEntity);
            }
        }

        public override ItemsCollection Inventory
        {
            get => base.Inventory;
            set
            {
                ((SyncObject)base.Inventory)?.SetParentEntity(null);
                base.Inventory = value;
                OnPropChanged(10);
                ((SyncObject)base.Inventory)?.SetParentEntity(ParentEntity);
            }
        }

        public override IEntityObjectDef Def
        {
            get => base.Def;
            set
            {
                base.Def = value;
                OnPropChanged(11);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
            ((IGhost)SpellsEngine)?.ClearSerialization();
            ((IGhost)Cmp)?.ClearSerialization();
            ((IGhost)StatsEngine)?.ClearSerialization();
            ((IGhost)Inventory)?.ClearSerialization();
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, -1110022632);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, 971199216);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, 971199216);
                Rotation = stream.GetFloat();
                CheckStream(stream, 971199216);
            }

            CheckStream(stream, 427540163);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, 427540163);
                ActiveItemId = stream.GetLong();
                CheckStream(stream, 427540163);
            }

            CheckStream(stream, -1098309699);
            if ((mask & (1 << 2)) != 0)
            {
                CheckStream(stream, -1098309699);
                var has = stream.GetBool();
                SecretRole = !has ? default : (RoleDef)SyncTypesMap.GetSerializerForObjType(typeof(RoleDef)).Deserialize(stream);
                CheckStream(stream, -1098309699);
            }

            CheckStream(stream, -848155994);
            if ((mask & (1 << 3)) != 0)
            {
                CheckStream(stream, -848155994);
                var has = stream.GetBool();
                Job = !has ? default : (RoleDef)SyncTypesMap.GetSerializerForObjType(typeof(RoleDef)).Deserialize(stream);
                CheckStream(stream, -848155994);
            }

            CheckStream(stream, 1926671600);
            if ((mask & (1 << 4)) != 0)
            {
                CheckStream(stream, 1926671600);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    SpellsEngine = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    SpellsEngine = (SpellsEngine)newVal;
                }

                CheckStream(stream, 1926671600);
            }
            else
            {
                CheckStream(stream, 1926671600);
                ((IGhost)SpellsEngine)?.Deserialize(stream);
                CheckStream(stream, 1926671600);
            }

            CheckStream(stream, 134340686);
            if ((mask & (1 << 5)) != 0)
            {
                CheckStream(stream, 134340686);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    Cmp = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    Cmp = (SampleComponent)newVal;
                }

                CheckStream(stream, 134340686);
            }
            else
            {
                CheckStream(stream, 134340686);
                ((IGhost)Cmp)?.Deserialize(stream);
                CheckStream(stream, 134340686);
            }

            CheckStream(stream, 891646676);
            if ((mask & (1 << 6)) != 0)
            {
                CheckStream(stream, 891646676);
                Name = stream.GetString();
                CheckStream(stream, 891646676);
            }

            CheckStream(stream, 213943412);
            if ((mask & (1 << 7)) != 0)
            {
                CheckStream(stream, 213943412);
                var has = stream.GetBool();
                Position = !has ? default : (Vec2)SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Deserialize(stream);
                CheckStream(stream, 213943412);
            }

            CheckStream(stream, 2087997190);
            if ((mask & (1 << 8)) != 0)
            {
                CheckStream(stream, 2087997190);
                Speed = stream.GetFloat();
                CheckStream(stream, 2087997190);
            }

            CheckStream(stream, 2100242993);
            if ((mask & (1 << 9)) != 0)
            {
                CheckStream(stream, 2100242993);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    StatsEngine = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    StatsEngine = (StatsEngine)newVal;
                }

                CheckStream(stream, 2100242993);
            }
            else
            {
                CheckStream(stream, 2100242993);
                ((IGhost)StatsEngine)?.Deserialize(stream);
                CheckStream(stream, 2100242993);
            }

            CheckStream(stream, 1096702332);
            if ((mask & (1 << 10)) != 0)
            {
                CheckStream(stream, 1096702332);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    Inventory = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    Inventory = (ItemsCollection)newVal;
                }

                CheckStream(stream, 1096702332);
            }
            else
            {
                CheckStream(stream, 1096702332);
                ((IGhost)Inventory)?.Deserialize(stream);
                CheckStream(stream, 1096702332);
            }

            CheckStream(stream, -139319083);
            if ((mask & (1 << 11)) != 0)
            {
                CheckStream(stream, -139319083);
                var has = stream.GetBool();
                Def = !has ? default : (IEntityObjectDef)SyncTypesMap.GetSerializerForObjType(typeof(IEntityObjectDef)).Deserialize(stream);
                CheckStream(stream, -139319083);
            }
        }

        public override void SetParentEntityRecursive()
        {
            ((SyncObject)SpellsEngine)?.SetParentEntity(this.ParentEntity);
            ((SyncObject)Cmp)?.SetParentEntity(this.ParentEntity);
            ((SyncObject)StatsEngine)?.SetParentEntity(this.ParentEntity);
            ((SyncObject)Inventory)?.SetParentEntity(this.ParentEntity);
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, -1110022632);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, 971199216);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, 971199216);
                hasAny = true;
                stream.Put(Rotation);
                SafeguardStream(stream, 971199216);
            }

            SafeguardStream(stream, 427540163);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, 427540163);
                hasAny = true;
                stream.Put(ActiveItemId);
                SafeguardStream(stream, 427540163);
            }

            SafeguardStream(stream, -1098309699);
            if ((deltaMask & (1 << 2)) != 0)
            {
                SafeguardStream(stream, -1098309699);
                hasAny = true;
                if (SecretRole != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(RoleDef)).Serialize(SecretRole, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, -1098309699);
            }

            SafeguardStream(stream, -848155994);
            if ((deltaMask & (1 << 3)) != 0)
            {
                SafeguardStream(stream, -848155994);
                hasAny = true;
                if (Job != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(RoleDef)).Serialize(Job, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, -848155994);
            }

            SafeguardStream(stream, 1926671600);
            if ((deltaMask & (1 << 4)) != 0)
            {
                SafeguardStream(stream, 1926671600);
                hasAny = true;
                if (SpellsEngine == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(SpellsEngine.GetType()));
                    ((IGhost)SpellsEngine).Serialize(ref stream, true);
                }

                SafeguardStream(stream, 1926671600);
            }
            else
            {
                SafeguardStream(stream, 1926671600);
                hasAny |= ((IGhost)SpellsEngine)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, 1926671600);
            }

            SafeguardStream(stream, 134340686);
            if ((deltaMask & (1 << 5)) != 0)
            {
                SafeguardStream(stream, 134340686);
                hasAny = true;
                if (Cmp == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(Cmp.GetType()));
                    ((IGhost)Cmp).Serialize(ref stream, true);
                }

                SafeguardStream(stream, 134340686);
            }
            else
            {
                SafeguardStream(stream, 134340686);
                hasAny |= ((IGhost)Cmp)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, 134340686);
            }

            SafeguardStream(stream, 891646676);
            if ((deltaMask & (1 << 6)) != 0)
            {
                SafeguardStream(stream, 891646676);
                hasAny = true;
                stream.Put(Name);
                SafeguardStream(stream, 891646676);
            }

            SafeguardStream(stream, 213943412);
            if ((deltaMask & (1 << 7)) != 0)
            {
                SafeguardStream(stream, 213943412);
                hasAny = true;
                if (Position != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Serialize(Position, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, 213943412);
            }

            SafeguardStream(stream, 2087997190);
            if ((deltaMask & (1 << 8)) != 0)
            {
                SafeguardStream(stream, 2087997190);
                hasAny = true;
                stream.Put(Speed);
                SafeguardStream(stream, 2087997190);
            }

            SafeguardStream(stream, 2100242993);
            if ((deltaMask & (1 << 9)) != 0)
            {
                SafeguardStream(stream, 2100242993);
                hasAny = true;
                if (StatsEngine == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(StatsEngine.GetType()));
                    ((IGhost)StatsEngine).Serialize(ref stream, true);
                }

                SafeguardStream(stream, 2100242993);
            }
            else
            {
                SafeguardStream(stream, 2100242993);
                hasAny |= ((IGhost)StatsEngine)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, 2100242993);
            }

            SafeguardStream(stream, 1096702332);
            if ((deltaMask & (1 << 10)) != 0)
            {
                SafeguardStream(stream, 1096702332);
                hasAny = true;
                if (Inventory == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(Inventory.GetType()));
                    ((IGhost)Inventory).Serialize(ref stream, true);
                }

                SafeguardStream(stream, 1096702332);
            }
            else
            {
                SafeguardStream(stream, 1096702332);
                hasAny |= ((IGhost)Inventory)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, 1096702332);
            }

            SafeguardStream(stream, -139319083);
            if ((deltaMask & (1 << 11)) != 0)
            {
                SafeguardStream(stream, -139319083);
                hasAny = true;
                if (Def != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(IEntityObjectDef)).Serialize(Def, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, -139319083);
            }

            return hasAny;
        }

        public override void SetActiveItem(long itemId)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.SetActiveItem(itemId);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new CharacterEntitySetActiveItemMessage()
                {EntityId = Id, itemId = itemId});
            }
        }

        public override void ActivateItem()
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.ActivateItem();
            }
            else
            {
                CurrentServer.HandleEntityMessage(new CharacterEntityActivateItemMessage()
                {EntityId = Id, });
            }
        }

        public override void ReceivePosition(Vec2 newPosition)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.ReceivePosition(newPosition);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new CharacterEntityReceivePositionMessage()
                {EntityId = Id, newPosition = newPosition});
            }
        }

        public override void RunImpact(ScriptingContext originalContext, IImpactDef def)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.RunImpact(originalContext, def);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new CharacterEntityRunImpactMessage()
                {EntityId = Id, originalContext = originalContext, def = def});
            }
        }

        public override void AddItem(Item item)
        {
            if (ParentEntity.IsCurrentlyExecuting)
            {
                base.AddItem(item);
            }
            else
            {
                CurrentServer.HandleEntityMessage(new CharacterEntityAddItemMessage()
                {EntityId = Id, item = item});
            }
        }
    }

    public class CharacterEntitySetActiveItemMessage : EntityMessage
    {
        public override int NetId => 722374823;
        public long itemId;
        public override void Run(object entity)
        {
            ((CharacterEntity)entity).SetActiveItem(itemId);
        }
    }

    public class CharacterEntitySetActiveItemMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new CharacterEntitySetActiveItemMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                messageToSerialize.itemId = stream.GetLong();
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (CharacterEntitySetActiveItemMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                stream.Put(messageToSerialize.itemId);
            }

            return true;
        }
    }

    public class CharacterEntityActivateItemMessage : EntityMessage
    {
        public override int NetId => 877136339;
        public override void Run(object entity)
        {
            ((CharacterEntity)entity).ActivateItem();
        }
    }

    public class CharacterEntityActivateItemMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new CharacterEntityActivateItemMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (CharacterEntityActivateItemMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            return true;
        }
    }

    public class CharacterEntityReceivePositionMessage : EntityMessage
    {
        public override int NetId => 252314265;
        public Vec2 newPosition;
        public override void Run(object entity)
        {
            ((CharacterEntity)entity).ReceivePosition(newPosition);
        }
    }

    public class CharacterEntityReceivePositionMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new CharacterEntityReceivePositionMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                var has = stream.GetBool();
                messageToSerialize.newPosition = !has ? default : (Vec2)SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Deserialize(stream);
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (CharacterEntityReceivePositionMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.newPosition != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Serialize(messageToSerialize.newPosition, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            return true;
        }
    }

    public class CharacterEntityRunImpactMessage : EntityMessage
    {
        public override int NetId => -1332726086;
        public ScriptingContext originalContext;
        public IImpactDef def;
        public override void Run(object entity)
        {
            ((CharacterEntity)entity).RunImpact(originalContext, def);
        }
    }

    public class CharacterEntityRunImpactMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new CharacterEntityRunImpactMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                var has = stream.GetBool();
                messageToSerialize.originalContext = !has ? default : (ScriptingContext)SyncTypesMap.GetSerializerForObjType(typeof(ScriptingContext)).Deserialize(stream);
            }

            {
                var has = stream.GetBool();
                messageToSerialize.def = !has ? default : (IImpactDef)SyncTypesMap.GetSerializerForObjType(typeof(IImpactDef)).Deserialize(stream);
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (CharacterEntityRunImpactMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.originalContext != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(ScriptingContext)).Serialize(messageToSerialize.originalContext, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.def != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(IImpactDef)).Serialize(messageToSerialize.def, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            return true;
        }
    }

    public class CharacterEntityAddItemMessage : EntityMessage
    {
        public override int NetId => 1396019089;
        public Item item;
        public override void Run(object entity)
        {
            ((CharacterEntity)entity).AddItem(item);
        }
    }

    public class CharacterEntityAddItemMessageSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var messageToSerialize = new CharacterEntityAddItemMessage();
            {
                var has = stream.GetBool();
                messageToSerialize.EntityId = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            {
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    messageToSerialize.item = null;
                }
                else
                {
                    var newVal = Activator.CreateInstance(SyncTypesMap.GetSyncTypeFromId(stream.GetInt()));
                    ((IGhost)newVal).Deserialize(stream);
                    messageToSerialize.item = (Item)newVal;
                }
            }

            return messageToSerialize;
        }

        public bool Serialize(object objToSerialize, ref NetDataWriter stream)
        {
            var messageToSerialize = (CharacterEntityAddItemMessage)objToSerialize;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (messageToSerialize.EntityId != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(messageToSerialize.EntityId, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (messageToSerialize.item == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    stream.Put(SyncTypesMap.GetIdFromSyncType(messageToSerialize.item.GetType()));
                    ((IGhost)messageToSerialize.item).Serialize(ref stream, true);
                }
            }

            return true;
        }
    }
}