// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CodeGen;
using Definitions;
using NetworkEngine;
using System;
using System.Collections.Generic;
using System.Text;
using LiteNetLib.Utils;

namespace Yogollag
{
    [GeneratedClass]
    public class LocToIdSync : IGhostLikeSerializer
    {
        public object Deserialize(NetDataReader stream)
        {
            var objToSerialize = new LocToId();
            {
                var has = stream.GetBool();
                objToSerialize.Loc = !has ? default : (BaseDef)SyncTypesMap.GetSerializerForObjType(typeof(BaseDef)).Deserialize(stream);
            }

            {
                var has = stream.GetBool();
                objToSerialize.Id = !has ? default : (EntityId)SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Deserialize(stream);
            }

            return objToSerialize;
        }

        public bool Serialize(object obj, ref NetDataWriter stream)
        {
            var objToSerialize = (LocToId)obj;
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            {
                if (objToSerialize.Loc != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(BaseDef)).Serialize(objToSerialize.Loc, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            {
                if (objToSerialize.Id != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(EntityId)).Serialize(objToSerialize.Id, ref stream);
                }
                else
                {
                    stream.Put(false);
                }
            }

            return true;
        }
    }
}

namespace Yogollag
{
    [GeneratedClass]
    public partial class SceneEntitySync
    {
        override protected void SetDefsForComponents()
        {
        }

        override public void CallInitOnComponents()
        {
        }

        override public void CallCreateOnComponents()
        {
        }

        override public void CallDestroyOnComponents()
        {
        }
    }

    //obj SceneEntity generic  hasCustomSerialization false
    //debug info IEntityPropertyChanged,IPositionedEntity 2
    [GeneratedClass]
    public partial class SceneEntitySync : SceneEntity, IGhost
    {
        public override DeltaList<EntityId> ContextScenes
        {
            get => base.ContextScenes;
            set
            {
                ((SyncObject)base.ContextScenes)?.SetParentEntity(null);
                base.ContextScenes = value;
                OnPropChanged(0);
                ((SyncObject)base.ContextScenes)?.SetParentEntity(ParentEntity);
            }
        }

        public override Single Rotation
        {
            get => base.Rotation;
            set
            {
                base.Rotation = value;
                OnPropChanged(1);
            }
        }

        public override Vec2 Position
        {
            get => base.Position;
            set
            {
                base.Position = value;
                OnPropChanged(2);
            }
        }

        public override SceneDef SceneDef
        {
            get => base.SceneDef;
            set
            {
                base.SceneDef = value;
                OnPropChanged(3);
            }
        }

        public override DeltaList<LocToId> Locators
        {
            get => base.Locators;
            set
            {
                ((SyncObject)base.Locators)?.SetParentEntity(null);
                base.Locators = value;
                OnPropChanged(4);
                ((SyncObject)base.Locators)?.SetParentEntity(ParentEntity);
            }
        }

        int _deltaMask;
        public void ClearSerialization()
        {
            _deltaMask = 0;
            ((IGhost)ContextScenes)?.ClearSerialization();
            ((IGhost)Locators)?.ClearSerialization();
        }

        public void Deserialize(NetDataReader stream)
        {
            CheckStream(stream, -1903144948);
            //var hasAny = stream.GetBool();
            //if(!hasAny)
            //    return;
            var mask = stream.GetInt();
            CheckStream(stream, -256570301);
            if ((mask & (1 << 0)) != 0)
            {
                CheckStream(stream, -256570301);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    ContextScenes = null;
                }
                else
                {
                    var newVal = SyncObject.New<DeltaList<EntityId>>();
                    ((IGhost)newVal).Deserialize(stream);
                    ContextScenes = (DeltaList<EntityId>)newVal;
                }

                CheckStream(stream, -256570301);
            }
            else
            {
                CheckStream(stream, -256570301);
                ((IGhost)ContextScenes)?.Deserialize(stream);
                CheckStream(stream, -256570301);
            }

            CheckStream(stream, -1456363876);
            if ((mask & (1 << 1)) != 0)
            {
                CheckStream(stream, -1456363876);
                Rotation = stream.GetFloat();
                CheckStream(stream, -1456363876);
            }

            CheckStream(stream, 129343090);
            if ((mask & (1 << 2)) != 0)
            {
                CheckStream(stream, 129343090);
                var has = stream.GetBool();
                Position = !has ? default : (Vec2)SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Deserialize(stream);
                CheckStream(stream, 129343090);
            }

            CheckStream(stream, -1459608499);
            if ((mask & (1 << 3)) != 0)
            {
                CheckStream(stream, -1459608499);
                var has = stream.GetBool();
                SceneDef = !has ? default : (SceneDef)SyncTypesMap.GetSerializerForObjType(typeof(SceneDef)).Deserialize(stream);
                CheckStream(stream, -1459608499);
            }

            CheckStream(stream, -666120433);
            if ((mask & (1 << 4)) != 0)
            {
                CheckStream(stream, -666120433);
                var nullOrNot = stream.GetByte();
                if (nullOrNot == 0)
                {
                    Locators = null;
                }
                else
                {
                    var newVal = SyncObject.New<DeltaList<LocToId>>();
                    ((IGhost)newVal).Deserialize(stream);
                    Locators = (DeltaList<LocToId>)newVal;
                }

                CheckStream(stream, -666120433);
            }
            else
            {
                CheckStream(stream, -666120433);
                ((IGhost)Locators)?.Deserialize(stream);
                CheckStream(stream, -666120433);
            }

            OnAfterDeserialize();
        }

        public override void SetParentEntityRecursive()
        {
            ((SyncObject)ContextScenes)?.SetParentEntity(this.ParentEntity);
            ((SyncObject)Locators)?.SetParentEntity(this.ParentEntity);
        }

        void OnPropChanged(int prop)
        {
            _deltaMask |= 1 << prop;
        }

        public bool Serialize(ref NetDataWriter stream, bool initial)
        {
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            SafeguardStream(stream, -1903144948);
            bool hasAny = false;
            int deltaMask = _deltaMask;
            if (initial)
                deltaMask = int.MaxValue;
            /*if(deltaMask == 0)
                    {
                        if(stream != null)
                            stream.Put(false);
                        return false;
                    }*/
            if (stream == null)
                stream = new NetDataWriter(true, 5);
            //stream.Put(true);
            stream.Put(deltaMask);
            SafeguardStream(stream, -256570301);
            if ((deltaMask & (1 << 0)) != 0)
            {
                SafeguardStream(stream, -256570301);
                hasAny = true;
                if (ContextScenes == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    ((IGhost)ContextScenes).Serialize(ref stream, true);
                }

                SafeguardStream(stream, -256570301);
            }
            else
            {
                SafeguardStream(stream, -256570301);
                hasAny |= ((IGhost)ContextScenes)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, -256570301);
            }

            SafeguardStream(stream, -1456363876);
            if ((deltaMask & (1 << 1)) != 0)
            {
                SafeguardStream(stream, -1456363876);
                hasAny = true;
                stream.Put(Rotation);
                SafeguardStream(stream, -1456363876);
            }

            SafeguardStream(stream, 129343090);
            if ((deltaMask & (1 << 2)) != 0)
            {
                SafeguardStream(stream, 129343090);
                hasAny = true;
                if (Position != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(Vec2)).Serialize(Position, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, 129343090);
            }

            SafeguardStream(stream, -1459608499);
            if ((deltaMask & (1 << 3)) != 0)
            {
                SafeguardStream(stream, -1459608499);
                hasAny = true;
                if (SceneDef != default)
                {
                    stream.Put(true);
                    SyncTypesMap.GetSerializerForObjType(typeof(SceneDef)).Serialize(SceneDef, ref stream);
                }
                else
                {
                    stream.Put(false);
                }

                SafeguardStream(stream, -1459608499);
            }

            SafeguardStream(stream, -666120433);
            if ((deltaMask & (1 << 4)) != 0)
            {
                SafeguardStream(stream, -666120433);
                hasAny = true;
                if (Locators == null)
                    stream.Put((byte)0);
                else
                {
                    stream.Put((byte)1);
                    ((IGhost)Locators).Serialize(ref stream, true);
                }

                SafeguardStream(stream, -666120433);
            }
            else
            {
                SafeguardStream(stream, -666120433);
                hasAny |= ((IGhost)Locators)?.Serialize(ref stream, initial) ?? false;
                SafeguardStream(stream, -666120433);
            }

            return hasAny;
        }
    }
}